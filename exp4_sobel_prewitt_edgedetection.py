# -*- coding: utf-8 -*-
"""Exp4_Sobel_Prewitt_EdgeDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qB80XDLzHjZwoemi_xnLtuhzqitAxt9k

<div align="center">
<font size="6" face="Times New Roman"><b>Experiment-4</b></font>

<font size="5" face="Times New Roman"><b>Exploring the Sobel and Prewitt Operator for Edge Detection</b></font>
</div>

<font size="4" face="Times New Roman">
<b>Objective</b>: To understand the role of the Sobel and Prewitt operator in edge detection. This experiment will focus on applying the Sobel operator in different orientations and analyzing how varying kernel sizes and orientations affect the detection of edges in an image.

**Code:**

</font>
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2

flower=cv2.cvtColor(cv2.imread("./edgeflower.jpg"),cv2.COLOR_BGR2GRAY)

image=cv2.cvtColor(cv2.imread("./image_2.jpeg"),cv2.COLOR_BGR2GRAY)

#plot two images side by side using matplotlib and imshow
plt.figure(figsize=(10,10))
plt.subplot(1,2,1)
plt.imshow(flower,cmap="gray")
plt.title("flower")
plt.subplot(1,2,2)
plt.imshow(image,cmap="gray")
plt.title("image")
plt.show()

def padding(image, pad_width,type,fixed_value=0):
    #getting image height and width
    height, width = image.shape
    padded_height = height + 2 * pad_width
    padded_width = width + 2 * pad_width

    padded_image = np.zeros((padded_height, padded_width), dtype=image.dtype)
    for i in range(height):
        for j in range(width):
          padded_image[i + pad_width, j + pad_width] = image[i, j]
    if fixed_value==0:
      return padded_image
    if type=="same":
      # Top and bottom border
      for i in range(pad_width):
        padded_image[i, :] = padded_image[pad_width, :]
        padded_image[-i - 1, :] = padded_image[-pad_width - 1, :]

      # Left and right border
      for j in range(pad_width):
        padded_image[:, j] = padded_image[:, pad_width]
        padded_image[:, -j - 1] = padded_image[:, -pad_width - 1]
    elif type=="fixed":
      print("in fixed")
      padded_image[:pad_width, :] = fixed_value
      padded_image[-pad_width:, :] = fixed_value
      padded_image[:, :pad_width] = fixed_value
      padded_image[:, -pad_width:] = fixed_value

    return padded_image

sobel_x=np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
sobel_y=sobel_x.T

print(sobel_x)
print(sobel_y)

def sobel_filter(image, padding_type='zero',stride=1):
    height, width = image.shape
    pad_width = 3// 2
    if padding_type == 'zero':
        padded_image = padding(image, pad_width, 'fixed')
    elif padding_type== 'same':
        padded_image = padding(image, pad_width, 'same')
    else:
        raise ValueError("Invalid padding type")
    edge_horizontal=image.copy()
    edge_vertical=image.copy()

    for i in range(0,height,stride):
        for j in range(0,width,stride):
            edge_horizontal[i, j] = abs(np.sum(np.multiply(padded_image[i:i+3, j:j+3],sobel_x)))
            edge_vertical[i,j]=abs(np.sum(np.multiply(padded_image[i:i+3, j:j+3],sobel_y)))
    return edge_horizontal,edge_vertical

prewitt_x=np.array([[1,0,-1],[1,0,-1],[1,0,-1]])
prewitt_y=prewitt_x.T

print(prewitt_x)
print(prewitt_y)

def prewitt_filter(image, padding_type='zero',stride=1):
    height, width = image.shape
    pad_width = 3// 2
    if padding_type == 'zero':
        padded_image = padding(image, pad_width, 'fixed')
    elif padding_type== 'same':
        padded_image = padding(image, pad_width, 'same')
    else:
        raise ValueError("Invalid padding type")
    edge_horizontal=image.copy()
    edge_vertical=image.copy()

    for i in range(0,height,stride):
        for j in range(0,width,stride):
            edge_horizontal[i, j] = abs(np.sum(np.multiply(padded_image[i:i+3, j:j+3],prewitt_x)))
            edge_vertical[i,j]=abs(np.sum(np.multiply(padded_image[i:i+3, j:j+3],prewitt_y)))
    return edge_horizontal,edge_vertical

"""<font size="4" face="Times New Roman">
<br>
<br>

**Result:**
</font>
"""

#plot the results of sobel x soble y and prewitt x and prewitt y for both the images flower and image variable

edge_x,edge_y=sobel_filter(flower)
plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.imshow(edge_x,cmap="gray")
plt.title("Sobel Horizontal Edges")
plt.subplot(1,3,2)
plt.imshow(edge_y,cmap="gray")
plt.title("Sobel Vertical Edges")
plt.subplot(1,3,3)
plt.imshow(edge_x+edge_y,cmap="gray")
plt.title("Sobel Both Edges")
plt.show()

edge_x,edge_y=prewitt_filter(flower)
plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.imshow(edge_x,cmap="gray")
plt.title("Prewitt Horizontal Edges")
plt.subplot(1,3,2)
plt.imshow(edge_y,cmap="gray")
plt.title("Prewitt Vertical Edges")
plt.subplot(1,3,3)
plt.imshow(edge_y,cmap="gray")
plt.title("Prewitt Both Edges")
plt.show()


edge_x,edge_y=sobel_filter(image)
plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.imshow(edge_x,cmap="gray")
plt.title("Sobel Horizontal Edges")
plt.subplot(1,3,2)
plt.imshow(edge_y,cmap="gray")
plt.title("Sobel Vertical Edges")
plt.subplot(1,3,3)
plt.imshow(edge_x+edge_y,cmap="gray")
plt.title("Sobel Both Edges")
plt.show()

edge_x,edge_y=prewitt_filter(image)
plt.figure(figsize=(10,10))
plt.subplot(1,3,1)
plt.imshow(edge_x,cmap="gray")
plt.title("Prewitt Horizontal Edges")
plt.subplot(1,3,2)
plt.imshow(edge_y,cmap="gray")
plt.title("Prewitt Vertical Edges")
plt.subplot(1,3,3)
plt.imshow(edge_y,cmap="gray")
plt.title("Prewitt Both Edges")
plt.show()

"""<font size="4" face="Times New Roman">
<br>
<br>
<br>
<br>
<br>
<br>

<b>Analysis:</b>

*   **Different Orientations and their Impact:**
    *   **Horizontal Orientation:** This emphasizes vertical edges in the image. In our flower image, we'll see the stem, the vertical lines in the petals, and other vertical details highlighted.
    *   **Vertical Orientation:** This emphasizes horizontal edges. We'll see the outlines of the flower, the horizontal lines in the petals, and other horizontal features accentuated.
    *   **Both Orientations:** This combines both horizontal and vertical edge detection, giving a more complete picture of the edges in the image. We'll see a combination of the features highlighted in the previous two orientations.

*   **Sobel vs Prewitt**
    *   **Sobel:** The Sobel operator typically produces slightly smoother edges compared to Prewitt.
    *   **Prewitt:** The Prewitt operator might be slightly more sensitive to noise due to its simpler kernel.

**Conclusion:**

This experiment demonstrates how the Sobel and Prewitt operators can be used for edge detection in images. By varying the kernel size and orientation, we can control which types of edges are detected and how prominently they are displayed. This flexibility makes these operators valuable tools in various image processing and computer vision applications.
</font>
"""