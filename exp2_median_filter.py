# -*- coding: utf-8 -*-
"""Exp2_Median_Filter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/125NLIa0-tMCXagwIuR03gRLs4mOxUcwd
"""

import numpy as np
import matplotlib.pyplot as plt

from tensorflow.keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()

image = x_train[500]

# function for padding

def padding(image, pad_width,type,fixed_value=0):
    #getting image height and width
    height, width = image.shape
    padded_height = height + 2 * pad_width
    padded_width = width + 2 * pad_width

    padded_image = np.zeros((padded_height, padded_width), dtype=image.dtype)
    for i in range(height):
        for j in range(width):
          padded_image[i + pad_width, j + pad_width] = image[i, j]
    if fixed_value==0:
      return padded_image
    if type=="same":
      # Top and bottom border
      for i in range(pad_width):
        padded_image[i, :] = padded_image[pad_width, :]
        padded_image[-i - 1, :] = padded_image[-pad_width - 1, :]

      # Left and right border
      for j in range(pad_width):
        padded_image[:, j] = padded_image[:, pad_width]
        padded_image[:, -j - 1] = padded_image[:, -pad_width - 1]
    elif type=="fixed":
      print("in fixed")
      padded_image[:pad_width, :] = fixed_value
      padded_image[-pad_width:, :] = fixed_value
      padded_image[:, :pad_width] = fixed_value
      padded_image[:, -pad_width:] = fixed_value

    return padded_image

padded_image_same=padding(image,3,"same")
padded_image_zero=padding(image,3,"fixed")

fig, axes = plt.subplots(1, 3, figsize=(8, 4))
axes[0].imshow(image, cmap='gray')
axes[0].set_title('Original Image')
axes[1].imshow(padded_image_same, cmap='gray')
axes[1].set_title('Padded Image with same ')
axes[2].imshow(padded_image_zero, cmap='gray')
axes[2].set_title('Padded Image with zero')
plt.show()

def median_filter(image, kernel_size, padding_type='zero',stride=1):
  if kernel_size % 2 == 0:
    raise ValueError("Kernel size must be odd")
  height, width = image.shape
  pad_width = kernel_size // 2
  if padding_type == 'zero':
    padded_image = padding(image, pad_width, 'fixed')
  elif padding_type== 'same':
    padded_image = padding(image, pad_width, 'same')
  else:
    raise ValueError("Invalid padding type")
  filtered_image=image.copy()

  for i in range(0,height,stride):
    for j in range(0,width,stride):
      filtered_image[i, j] = np.median(padded_image[i:i+kernel_size, j:j+kernel_size])
  return filtered_image

median_filtered_image = median_filter(image, 3, 'zero',200)
plt.imshow(median_filtered_image, cmap='gray')
plt.title('Median Filtered Image')

def salt_and_pepper_noise(image, prob):
  noisy_image = image.copy()
  salt_mask=np.random.choice([0, 1, 2], size=image.shape, p=prob)
  #namak means 0
  noisy_image[salt_mask==0]=0
  #kala mirch means 1
  noisy_image[salt_mask==1]=1
  #varna 2 means jo hai vahi
  return noisy_image

random_numbers = np.random.rand(3)
probabilities = random_numbers / np.sum(random_numbers)

noisy_image=salt_and_pepper_noise(image,probabilities)

filtered_image=median_filter(noisy_image,3,"zero",200)

#plot the original noisy and filtered image
fig, axes = plt.subplots(1, 3, figsize=(8, 4))
axes[0].imshow(image, cmap='gray')
axes[0].set_title('Original Image')
axes[1].imshow(noisy_image, cmap='gray')
axes[1].set_title('Noisy Image')
axes[2].imshow(filtered_image, cmap='gray')
axes[2].set_title('Filtered Image')
plt.show()

noisy_image=salt_and_pepper_noise(image,probabilities)

filtered_image=median_filter(noisy_image,3,"zero",500)

#plot the original noisy and filtered image
fig, axes = plt.subplots(1, 3, figsize=(8, 4))
axes[0].imshow(image, cmap='gray')
axes[0].set_title('Original Image')
axes[1].imshow(noisy_image, cmap='gray')
axes[1].set_title('Noisy Image')
axes[2].imshow(filtered_image, cmap='gray')
axes[2].set_title('Filtered Image')
plt.show()

noisy_image=salt_and_pepper_noise(image,probabilities)

filtered_image=median_filter(noisy_image,3,"zero",700)

#plot the original noisy and filtered image
fig, axes = plt.subplots(1, 3, figsize=(8, 4))
axes[0].imshow(image, cmap='gray')
axes[0].set_title('Original Image')
axes[1].imshow(noisy_image, cmap='gray')
axes[1].set_title('Noisy Image')
axes[2].imshow(filtered_image, cmap='gray')
axes[2].set_title('Filtered Image')
plt.show()

import cv2
image = cv2.cvtColor(cv2.imread("/content/Nivesh.JPG"), cv2.COLOR_BGR2GRAY)

!pip install google-colab
from google.colab.patches import cv2_imshow
import cv2

cv2_imshow(image)
cv2.waitKey(0)

image.shape

for kernel_size in range(21,100,20):
  for stride in range(1,400,50):
    noisy_image=salt_and_pepper_noise(image,probabilities)
    filtered_image=median_filter(noisy_image,kernel_size,"zero",stride)
    print("FOR kernel size:",kernel_size,"and stride:",stride)
    #plot the original noisy and filtered image
    fig, axes = plt.subplots(1, 3, figsize=(8, 4))
    axes[0].imshow(image, cmap='gray')
    axes[0].set_title('Original Image')
    axes[1].imshow(noisy_image, cmap='gray')
    axes[1].set_title('Noisy Image')
    axes[2].imshow(filtered_image, cmap='gray')
    axes[2].set_title('Filtered Image')
    plt.show()

