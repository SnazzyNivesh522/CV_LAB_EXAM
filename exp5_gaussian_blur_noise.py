# -*- coding: utf-8 -*-
"""Exp5_Gaussian_Blur_Noise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DYl9smxw_tWktxrPvvNbNayA6gXi1T9P
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2

# img=cv2.cvtColor(cv2.imread("./Lenna.png"),cv2.COLOR_BGR2GRAY)
img=cv2.cvtColor(cv2.imread("./test-200x300.jpeg"),cv2.COLOR_BGR2GRAY)


def add_gaussian_noise(image, mean=0, variance=0.01):
  noise = np.random.normal(mean, variance, image.shape)
  return image + noise

def padding(image, pad_width,type,fixed_value=0):
    #getting image height and width
    height, width = image.shape
    padded_height = height + 2 * pad_width
    padded_width = width + 2 * pad_width

    padded_image = np.zeros((padded_height, padded_width), dtype=image.dtype)
    for i in range(height):
        for j in range(width):
          padded_image[i + pad_width, j + pad_width] = image[i, j]
    if fixed_value==0:
      return padded_image
    if type=="same":
      # Top and bottom border
      for i in range(pad_width):
        padded_image[i, :] = padded_image[pad_width, :]
        padded_image[-i - 1, :] = padded_image[-pad_width - 1, :]

      # Left and right border
      for j in range(pad_width):
        padded_image[:, j] = padded_image[:, pad_width]
        padded_image[:, -j - 1] = padded_image[:, -pad_width - 1]
    elif type=="fixed":
      print("in fixed")
      padded_image[:pad_width, :] = fixed_value
      padded_image[-pad_width:, :] = fixed_value
      padded_image[:, :pad_width] = fixed_value
      padded_image[:, -pad_width:] = fixed_value

    return padded_image
def gaussian_kernel(std_dev,kernel):
  if kernel=="default":
    kernel_size=(6*std_dev)+1
  else:
    kernel_size=kernel
  gaussian_kernel=np.zeros((kernel_size,kernel_size))
  for i in range(-kernel_size//2+1,kernel_size//2+1):
    for j in range(-kernel_size//2+1,kernel_size//2+1):
      gaussian_kernel[i+kernel_size//2,j+kernel_size//2]=np.exp(-(i**2+j**2)/(2*std_dev**2))/(2*np.pi*std_dev**2)

  #normalized gaussian_kernel
  gaussian_kernel=gaussian_kernel/np.sum(gaussian_kernel)
  return gaussian_kernel



def gaussian_filter(image,gaussian_kernel,padding_type,stride=1):
  kernel_size=gaussian_kernel.shape[0]
  height, width = image.shape
  pad_width = kernel_size // 2
  if padding_type == 'zero':
    padded_image = padding(image, pad_width, 'fixed')
  elif padding_type== 'same':
    padded_image = padding(image, pad_width, 'same')
  else:
    raise ValueError("Invalid padding type")
  filtered_image=image.copy()

  for i in range(0,height,stride):
    for j in range(0,width,stride):
      filtered_image[i, j] = np.sum(padded_image[i:i+kernel_size, j:j+kernel_size]*gaussian_kernel)
  return filtered_image

def median_filter(image, kernel_size, padding_type='zero',stride=1):
  if kernel_size % 2 == 0:
    raise ValueError("Kernel size must be odd")
  height, width = image.shape
  pad_width = kernel_size // 2
  if padding_type == 'zero':
    padded_image = padding(image, pad_width, 'fixed')
  elif padding_type== 'same':
    padded_image = padding(image, pad_width, 'same')
  else:
    raise ValueError("Invalid padding type")
  filtered_image=image.copy()

  for i in range(0,height,stride):
    for j in range(0,width,stride):
      filtered_image[i, j] = np.median(padded_image[i:i+kernel_size, j:j+kernel_size])
  return filtered_image

def mean_filter(image, kernel_size, padding_type='zero',stride=1):
  if kernel_size % 2 == 0:
    raise ValueError("Kernel size must be odd")
  height, width = image.shape
  pad_width = kernel_size // 2
  if padding_type == 'zero':
    padded_image = padding(image, pad_width, 'fixed')
  elif padding_type== 'same':
    padded_image = padding(image, pad_width, 'same')
  else:
    raise ValueError("Invalid padding type")
  filtered_image=image.copy()

  for i in range(0,height,stride):
    for j in range(0,width,stride):
      filtered_image[i, j] = np.mean(padded_image[i:i+kernel_size, j:j+kernel_size])
  return filtered_image

noise_variances = [25, 81, 144]
noisy_images = [add_gaussian_noise(img, mean=0,variance=var) for var in noise_variances]


fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 8))

axes[0, 0].imshow(img, cmap='gray')
axes[0, 0].set_title('Original Image')

for i in range(2):
    noisy_img = noisy_images[i]
    axes[i // 2 + 1, i % 2].imshow(noisy_img, cmap='gray')
    axes[i // 2 + 1, i % 2].set_title(f'Gaussian Noise (var={noise_variances[i]})')

axes[0, 1].imshow(noisy_images[2], cmap='gray')
axes[0, 1].set_title(f'Gaussian Noise (var={noise_variances[2]})')



filtered_images_gaussian = []
filtered_images_median = []
filtered_images_mean = []

for k in [5,7,9]:

    gk=gaussian_kernel(1,k)
    print("For kernel size:" ,k)

    for noisy_img in noisy_images:

        filtered_gaussian = gaussian_filter(noisy_img, gaussian_kernel=gk, padding_type='zero')
        filtered_images_gaussian.append(filtered_gaussian)

        filtered_median = median_filter(noisy_img, kernel_size=5, padding_type='zero')
        filtered_images_median.append(filtered_median)

        filtered_mean = mean_filter(noisy_img, kernel_size=5, padding_type='zero')
        filtered_images_mean.append(filtered_mean)

    fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(12, 10))
    for i, noisy_img in enumerate(noisy_images):
        axes[i, 0].imshow(noisy_img, cmap='gray')
        axes[i, 0].set_title(f'Noisy (var={noise_variances[i]})')
        axes[i, 1].imshow(filtered_images_gaussian[i], cmap='gray')
        axes[i, 1].set_title('Gaussian Filtered')
        axes[i, 2].imshow(filtered_images_median[i], cmap='gray')
        axes[i, 2].set_title('Median Filtered')
        axes[i, 3].imshow(filtered_images_mean[i], cmap='gray')
        axes[i, 3].set_title('Mean Filtered')
    plt.tight_layout()
    plt.show()