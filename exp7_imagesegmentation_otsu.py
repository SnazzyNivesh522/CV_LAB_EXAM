# -*- coding: utf-8 -*-
"""Exp7_ImageSegmentation_Otsu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1juRGyeRYeMKWMEBwIMP0LghJqDDarQrI
"""

import matplotlib.pyplot as plt
from skimage import data
import numpy as np

image=data.camera()
image=image.astype(int)

def calculate_histogram(image):
 return np.bincount(image.ravel(), minlength=256)
plt.bar(range(256), calculate_histogram(image))
plt.show()

plt.plot(range(256),calculate_histogram(image))
plt.show()

def thresholding(image,thresh):
 image2=image.copy()
 image2[image2>thresh]=255
 image2[image2<=thresh]=0
 plt.imshow(image2,cmap='gray')
 plt.show()

thresholding(image,128)

variance_between_class=np.zeros(256)
def otsu_thresholding(histogram):

  total_pixels = np.sum(histogram)
  pixel_range = np.arange(256)
  cumsum = np.cumsum(histogram)
  cumsum_pixel = np.cumsum(histogram * pixel_range)
  max_variance = 0
  otsu_threshold = 0

  for t in range(1, 255):
    w0 = cumsum[t]
    w1 = total_pixels - w0

    if w0 == 0 or w1 == 0:
      continue

    m0 = cumsum_pixel[t] / w0
    m1 = (cumsum_pixel[-1] - cumsum_pixel[t]) / w1

    variance = w0 * w1 * ((m0 - m1) ** 2)
    variance_between_class[t] = variance
    if variance > max_variance:
      max_variance = variance
      otsu_threshold=t
  return otsu_threshold

threshold=otsu_thresholding(calculate_histogram(image))
print("Otsu threshold:",threshold)

thresholding(image,threshold)

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.plot(calculate_histogram(image), color='lightblue',
label='Distribution')
ax1.axvline(threshold, color='red', linestyle='--',
label='Threshold')
ax1.set_xlabel('Pixel Intensity')
ax1.set_ylabel('Pixel Count')
variance_between_class = variance_between_class / np.max(variance_between_class)
ax2.plot(variance_between_class, color='red', label='Inter-Class Variance')
ax2.set_ylabel('Inter-Class Variance')
plt.title("Otsu's Method Visualization")
plt.legend()
plt.show()

new_img=plt.imread('/content/Image_processing_pre_otsus_algorithm.jpg')
plt.imshow(new_img,cmap="gray")
plt.show()

x=new_img.copy()

threshold=otsu_thresholding(calculate_histogram(new_img))
print("Otsu threshold:",threshold)

x[x > threshold]=255
x[x<=threshold]=0
plt.imshow(x,cmap="gray")

fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.plot(calculate_histogram(new_img), color='lightblue',label='Distribution')
ax1.axvline(threshold, color='red', linestyle='--',label='Threshold')
ax1.set_xlabel('Pixel Intensity')
ax1.set_ylabel('Pixel Count')
variance_between_class = variance_between_class / np.max(variance_between_class)
ax2.plot(variance_between_class, color='red', label='Inter-Class Variance')
ax2.set_ylabel('Inter-Class Variance')
plt.title("Otsu's Method Visualization")
plt.legend()
plt.show()